version: '3.8'

services:
  api:
    container_name: api-utilisateurs
    build: .
    env_file:
      - .env
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.py  
      - FLASK_DEBUG=1  
    volumes:
      - .:/usr/src/app  # Montage du r√©pertoire principal pour l'application
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network


  db:
    image: postgres:alpine
    container_name: 'postgres-db'
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - ./migrations/dump.sql:/docker-entrypoint-initdb.d/dump.sql
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  adminer:
    container_name: adminer-user
    image: adminer
    depends_on:
      - db
    ports:
      - "8081:8080"  
    networks:
      - app_network

volumes:
  postgres-db:
  rabbitmq-data:
  rabbitmq-log:

networks:
  app_network:
    external: true
